(()=>{"use strict";class e{constructor(e,t,n){if(this.m=e,this.n=t,null!=n){if(n.length!=e*t)throw new Error("サイズの不一致");this.matrix=[];for(let s=0;s<e;s++){this.matrix[s]=[];for(let r=0;r<t;r++)this.matrix[s][r]=n[s+e*r]}}else{this.matrix=[];for(let n=0;n<e;n++){this.matrix[n]=[];for(let e=0;e<t;e++)this.matrix[n][e]=0}}}setValue(e,t,n){if(e<0||e>=this.m||t<0||t>=this.n)throw new Error("範囲外");this.matrix[e][t]=n}getValue(e,t){if(e<0||e>=this.m||t<0||t>=this.n)throw new Error("範囲外");return this.matrix[e][t]}mul(t){if(this.n!=t.m)throw new Error("サイズの不一致");const n=new e(this.m,t.n);for(let e=0;e<this.m;e++)for(let s=0;s<t.n;s++){let r=0;for(let n=0;n<this.n;n++)r+=this.getValue(e,n)*t.getValue(n,s);n.setValue(e,s,r)}return n}toArray(){const e=[];for(let t=0;t<this.m;t++)for(let n=0;n<this.n;n++)e[t+this.m*n]=this.getValue(t,n);return e}}class t{constructor(e,t,n,s,r,i){this.position=e,this.rotation=t,this.fov=n,this.aspect=s,this.near=r,this.far=i}getRotateMatrix(){return new e(4,4,[1,0,0,0,0,Math.cos(this.rotation.x),Math.sin(this.rotation.x),0,0,-Math.sin(this.rotation.x),Math.cos(this.rotation.x),0,0,0,0,1]).mul(new e(4,4,[Math.cos(this.rotation.y),0,-Math.sin(this.rotation.y),0,0,1,0,0,Math.sin(this.rotation.y),0,Math.cos(this.rotation.y),0,0,0,0,1]))}getTranslateMatrix(){return new e(4,4,[1,0,0,0,0,1,0,0,0,0,1,0,-this.position.x,-this.position.y,-this.position.z,1])}getInvRotateMatrixForMove(){return new e(4,4,[Math.cos(-this.rotation.y),0,-Math.sin(-this.rotation.y),0,0,1,0,0,Math.sin(-this.rotation.y),0,Math.cos(-this.rotation.y),0,0,0,0,1])}move(t){const n=this.getInvRotateMatrixForMove().mul(new e(4,1,[t.x,t.y,t.z,0]));this.position.x+=n.getValue(0,0),this.position.y+=n.getValue(1,0),this.position.z+=n.getValue(2,0)}rotate(e){this.rotation.x=Math.min(Math.max(this.rotation.x+e.x,-Math.PI/2),Math.PI/2),this.rotation.y=(this.rotation.y+e.y)%(2*Math.PI)}getViewMatrix(){return this.getRotateMatrix().mul(this.getTranslateMatrix())}getProjectionMatrix(){return new e(4,4,[1/(this.aspect*Math.tan(this.fov/2)),0,0,0,0,1/Math.tan(this.fov/2),0,0,0,0,-(this.far+this.near)/(this.far-this.near),-1,0,0,-2*this.far*this.near/(this.far-this.near),0])}}class n{constructor(e,t){this.x=e,this.y=t}toArray(){return[this.x,this.y]}}class s{constructor(e,t,n){this.x=e,this.y=t,this.z=n}toArray(){return[this.x,this.y,this.z]}}const r="KeyA",i="KeyD",a="KeyW",o="KeyS",h="Space",u="ShiftLeft";class c{constructor(e){this.L=0,this.R=0,this.F=0,this.B=0,this.U=0,this.D=0,e.addEventListener("keydown",(e=>{switch(e.code){case r:this.L=1;break;case i:this.R=1;break;case a:this.F=1;break;case o:this.B=1;break;case h:this.U=1;break;case u:this.D=1}}),!1),e.addEventListener("keyup",(e=>{switch(e.code){case r:this.L=0;break;case i:this.R=0;break;case a:this.F=0;break;case o:this.B=0;break;case h:this.U=0;break;case u:this.D=0}}),!1)}getLR(){return this.R-this.L}getUD(){return this.U-this.D}getFB(){return this.B-this.F}}class d{constructor(e,t,n){this.lastMovementX=0,this.lastMovementY=0,this.sensitivity=.003,this.sensitivity=n||.003,e.addEventListener("mousemove",(e=>{Math.abs(this.lastMovementX)<15&&Math.abs(e.movementX)>50||Math.abs(this.lastMovementY)<15&&Math.abs(e.movementY)>50||(this.lastMovementX=e.movementX,this.lastMovementY=e.movementY,t.rotate(new s(e.movementY*this.sensitivity,e.movementX*this.sensitivity,0)))}),!1)}}class f{constructor(e,t,n){this.x=e,this.y=t,this.z=n}getX(){return this.x}getY(){return this.y}getZ(){return this.z}}function l(e){return new Promise(((t,n)=>{const s=new Image;s.onload=()=>{const e=document.createElement("canvas"),n=64*Math.ceil(s.width/64);e.width=n,e.height=s.height;const r=e.getContext("2d");if(null==r)throw new Error("画像の読み込みに失敗しました");r.drawImage(s,0,0,n,s.height),t(r.getImageData(0,0,n,s.height))},s.onerror=e=>n(e),s.src=e}))}function g(e){return fetch(e).then((e=>e.text()))}function m(e){const t=[];return e.replace(/\r/g,"").split("\n").forEach((e=>{""!=(e=e.replace(/\s+/g," ").replace(/(^\s|\s$)/g,""))&&(e.startsWith("#")||t.push(e))})),t}var p,v=function(e,t,n,s){return new(n||(n=Promise))((function(r,i){function a(e){try{h(s.next(e))}catch(e){i(e)}}function o(e){try{h(s.throw(e))}catch(e){i(e)}}function h(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,o)}h((s=s.apply(e,t||[])).next())}))};function x(e){return v(this,void 0,void 0,(function*(){const t=m(yield g(e)),n=[];let s=null,r=null;for(let i=0;i<t.length;i++){const a=t[i].split(" ");"newmtl"==a[0]?(null!=s&&null!=r&&n.push({name:s,mapKd:r}),s=a[1],r=null):"map_Kd"==a[0]&&(r=e.replace(/\/[^/]*$/,"/"+a[1]))}return n.push({name:s,mapKd:r}),n}))}!function(e){e[e.TOP=0]="TOP",e[e.BOTTOM=1]="BOTTOM",e[e.SOUTH=2]="SOUTH",e[e.NORTH=3]="NORTH",e[e.EAST=4]="EAST",e[e.WEST=5]="WEST"}(p||(p={}));class w{constructor(){this.vertices=[],this.normals=[],this.uvCoords=[]}addFace(e,t){if(null==e||e.length<3)throw new Error("頂点が３つ以上必要です");if(null!=t&&e.length!=t.length)throw new Error("頂点の数と UV 座標の数が一致しません");for(let s=1;s<e.length-1;s++)null!=t?this.addTriangle(e[0],e[s],e[s+1],t[0],t[s],t[s+1]):this.addTriangle(e[0],e[s],e[s+1],new n(0,0),new n(0,0),new n(0,0))}addTriangle(e,t,n,s,r,i){const a=this.getSurfaceNormal(e,t,n);this.addVertex(e),this.addUVCoord(s),this.addNormal(a),this.addVertex(t),this.addUVCoord(r),this.addNormal(a),this.addVertex(n),this.addUVCoord(i),this.addNormal(a)}getSurfaceNormal(e,t,n){const r=new s(t.x-e.x,t.y-e.y,t.z-e.z),i=new s(n.x-e.x,n.y-e.y,n.z-e.z);return new s(r.y*i.z-r.z*i.y,r.z*i.x-r.x*i.z,r.x*i.y-r.y*i.x)}addNormal(e){this.normals.push(e.x,e.y,e.z)}addVertex(e){this.vertices.push(e.x,e.y,e.z)}addUVCoord(e){this.uvCoords.push(e.x,e.y)}getVertices(){return this.vertices}getNormals(){return this.normals}getUVCoords(){return this.uvCoords}}class y extends w{constructor(){super(),this.textureImages=[],this.instancePositions=[],this.instanceRotations=[],this.instanceTextureIds=[];const e=new s(-.5,.5,.5),t=new s(-.5,.5,-.5),r=new s(.5,.5,-.5),i=new s(.5,.5,.5),a=new s(-.5,-.5,.5),o=new s(-.5,-.5,-.5),h=new s(.5,-.5,-.5),u=new s(.5,-.5,.5);this.addFace([e,i,r,t],[new n(1/4,1/3),new n(.5,1/3),new n(.5,0),new n(1/4,0)]),this.addFace([a,o,h,u],[new n(1/4,2/3),new n(1/4,1),new n(.5,1),new n(.5,2/3)]),this.addFace([e,t,o,a],[new n(1/4,1/3),new n(0,1/3),new n(0,2/3),new n(1/4,2/3)]),this.addFace([i,u,h,r],[new n(.5,1/3),new n(.5,2/3),new n(3/4,2/3),new n(3/4,1/3)]),this.addFace([e,a,u,i],[new n(1/4,1/3),new n(1/4,2/3),new n(.5,2/3),new n(.5,1/3)]),this.addFace([t,r,h,o],[new n(1,1/3),new n(3/4,1/3),new n(3/4,2/3),new n(1,2/3)])}getOffsets(){return this.getVertices()}addInstance(e,t,n=p.SOUTH){this.instancePositions.push(e),this.instanceTextureIds.push(t),this.instanceRotations.push(n)}setTextureImages(e){this.textureImages=e}getTextureImages(){const e=[];return this.textureImages.forEach((t=>{e.push(t)})),e}getInstancePositions(){const e=[];return this.instancePositions.forEach((t=>{e.push(...t.toArray())})),e}getInstanceRotations(){const e=[];return this.instanceRotations.forEach((t=>{e.push(t)})),e}getInstanceTextureIds(){const e=[];return this.instanceTextureIds.forEach((t=>{e.push(t)})),e}getInstanceCount(){return this.instancePositions.length}getVertexCount(){return this.getVertices().length/3}}class T{constructor(e,t,r,i){this.v=[],this.vn=[],this.vt=[],this.f=[],this.v=e,this.vn=t,this.vt=r,this.f=i,this.vertices=[],this.normals=[],this.uvCoords=[],this.textureImages=[],this.vertexCount=0,this.f.forEach((e=>{const t=[],r=[],i=[];e.forEach((e=>{const a=this.v[e[0]-1];t.push(new s(a[0],a[1],a[2]));const o=this.vt[e[1]-1];i.push(new n(o[0],o[1]));const h=this.vn[e[2]-1];r.push(new s(h[0],h[1],h[2]))})),this.addFace(t,i,r)}))}addFace(e,t,n){for(let s=1;s<e.length-1;s++)this.addTriangle(e[0],e[s],e[s+1],n[0],n[s],n[s+1],t[0],t[s],t[s+1])}addTriangle(e,t,n,s,r,i,a,o,h){this.addVertex(e),this.addNormal(s),this.addUVCoord(a),this.addVertex(t),this.addNormal(r),this.addUVCoord(o),this.addVertex(n),this.addNormal(i),this.addUVCoord(h),this.vertexCount+=3}addVertex(e){this.vertices.push(e.x,e.y,e.z)}addNormal(e){this.normals.push(e.x,e.y,e.z)}addUVCoord(e){this.uvCoords.push(e.x,1-e.y)}getVertices(){return this.vertices}getNormals(){return this.normals}getUVCoords(){return this.uvCoords}getOffsets(){return this.getVertices()}setTextureImages(e){this.textureImages=e}getTextureImages(){const e=[];return this.textureImages.forEach((t=>{e.push(t)})),e}getInstancePositions(){return[0,20,0]}getInstanceRotations(){return[p.TOP]}getInstanceTextureIds(){return[0]}getInstanceCount(){return 1}getVertexCount(){return this.vertexCount}}class M extends w{constructor(){super(),this.textureImages=[],this.instancePositions=[],this.instanceRotations=[],this.instanceTextureIds=[];const e=new s(-.5,.5,.5),t=new s(.5,.5,.5),r=new s(.5,-.5,.5),i=new s(-.5,-.5,.5),a=new n(0,0),o=new n(1,0),h=new n(0,1),u=new n(1,1);this.addFace([e,i,r,t],[a,h,u,o])}getOffsets(){return this.getVertices()}addInstance(e,t,n=p.SOUTH){this.instancePositions.push(e),this.instanceTextureIds.push(t),this.instanceRotations.push(n)}setTextureImages(e){this.textureImages=e}getTextureImages(){const e=[];return this.textureImages.forEach((t=>{e.push(t)})),e}getInstancePositions(){const e=[];return this.instancePositions.forEach((t=>{e.push(...t.toArray())})),e}getInstanceRotations(){const e=[];return this.instanceRotations.forEach((t=>{e.push(t)})),e}getInstanceTextureIds(){const e=[];return this.instanceTextureIds.forEach((t=>{e.push(t)})),e}getInstanceCount(){return this.instancePositions.length}getVertexCount(){return this.getVertices().length/3}}const b={r:0,g:0,b:0,a:1};class P{constructor(e,t){this.ctx=e,this.device=t,e.configure({device:t,format:navigator.gpu.getPreferredCanvasFormat(),alphaMode:"premultiplied"}),this.depthTexture=t.createTexture({size:[e.canvas.width,e.canvas.height],format:"depth24plus",usage:GPUTextureUsage.RENDER_ATTACHMENT});const n=t.createShaderModule({code:"\nstruct VertexOut {\n  @builtin(position) position : vec4f,\n  @location(0) diffuse: f32,\n  @location(1) @interpolate(flat) textureId: u32,\n  @location(2) uv : vec2f\n}\n\n@group(0) @binding(0) var<uniform> numLights: u32;\n@group(0) @binding(1) var<uniform> lights: array<vec3f, 20>;\n@group(0) @binding(2) var<uniform> view: mat4x4f;\n@group(0) @binding(3) var<uniform> projection: mat4x4f;\n@group(0) @binding(4) var mySampler: sampler;\n@group(0) @binding(5) var myTexture: texture_2d_array<f32>;\n\nvar<private> model = array<mat4x4f, 6>(\n  // T = (-pi/2, 0)\n  mat4x4f(1.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, -1.0, 0.0,\n      0.0, 1.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 1.0),\n  // B = (pi/2, 0)\n  mat4x4f(1.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 1.0, 0.0,\n      0.0, -1.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 1.0),\n  // S = (0, 0)\n  mat4x4f(1.0, 0.0, 0.0, 0.0,\n      0.0, 1.0, 0.0, 0.0,\n      0.0, 0.0, 1.0, 0.0,\n      0.0, 0.0, 0.0, 1.0),\n  // N = (0, pi)\n  mat4x4f(-1.0, 0.0, 0.0, 0.0,\n      0.0, 1.0, 0.0, 0.0,\n      0.0, 0.0, -1.0, 0.0,\n      0.0, 0.0, 0.0, 1.0),\n  // E = (0, pi/2)\n  mat4x4f(0.0, 0.0, -1.0, 0.0,\n      0.0, 1.0, 0.0, 0.0,\n      1.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 1.0),\n  // W = (0, -pi/2)\n  mat4x4f(0.0, 0.0, 1.0, 0.0,\n      0.0, 1.0, 0.0, 0.0,\n      -1.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 1.0)\n);\n\n// TODO: 後で uniform で渡せるようにする\nvar<private> scale = mat4x4f(\n  1.0, 0.0, 0.0, 0.0,\n  0.0, 1.0, 0.0, 0.0,\n  0.0, 0.0, 1.0, 0.0,\n  0.0, 0.0, 0.0, 1.0\n);\n\n@vertex\nfn vertex_main(\n  @location(0) offset: vec3f,\n  @location(1) normal: vec3f,\n  @location(2) position: vec3f,\n  @location(3) rotation: u32,\n  @location(4) uv: vec2f,\n  @location(5) textureId: u32\n) -> VertexOut {\n  var out: VertexOut;\n  out.position = projection * view * (vec4f(position, 1.0) + scale * model[rotation] * vec4f(offset, 1.0));\n\n  // ライティング\n  // TODO: 環境光によるライティング\n  var diffuse = 0.0;\n  for (var i = 0u; i < numLights; i++) {\n    diffuse += max(0.0, - dot(model[rotation] * vec4f(normalize(normal), 0.0), vec4f(normalize(lights[i]), 0.0)));\n  }\n  out.diffuse = diffuse;\n\n  out.textureId = textureId;\n  out.uv = uv;\n  return out;\n}\n\n@fragment\nfn fragment_main(fragData: VertexOut) -> @location(0) vec4f {\n  return vec4f(fragData.diffuse * textureSample(myTexture, mySampler, fragData.uv, fragData.textureId).rgb, 1.0);\n}\n"}),s={vertex:{module:n,entryPoint:"vertex_main",buffers:[{attributes:[{shaderLocation:0,offset:0,format:"float32x3"}],arrayStride:12,stepMode:"vertex"},{attributes:[{shaderLocation:1,offset:0,format:"float32x3"}],arrayStride:12,stepMode:"vertex"},{attributes:[{shaderLocation:2,offset:0,format:"float32x3"}],arrayStride:12,stepMode:"instance"},{attributes:[{shaderLocation:3,offset:0,format:"uint32"}],arrayStride:4,stepMode:"instance"},{attributes:[{shaderLocation:4,offset:0,format:"float32x2"}],arrayStride:8,stepMode:"vertex"},{attributes:[{shaderLocation:5,offset:0,format:"uint32"}],arrayStride:4,stepMode:"instance"}]},fragment:{module:n,entryPoint:"fragment_main",targets:[{format:navigator.gpu.getPreferredCanvasFormat()}]},primitive:{topology:"triangle-list",cullMode:"back"},layout:"auto",depthStencil:{depthWriteEnabled:!0,depthCompare:"less",format:"depth24plus"}};this.renderPipeline=t.createRenderPipeline(s),this.sampler=t.createSampler({magFilter:"linear",minFilter:"linear"}),this.numLightsBuffer=this.device.createBuffer({size:4,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),this.lightsBuffer=this.device.createBuffer({size:320,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),this.viewBuffer=this.device.createBuffer({size:64,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),this.projectionBuffer=this.device.createBuffer({size:64,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),this.bindings=new Map}render(e,t){const n=this.device.createCommandEncoder(),s=e.getLights(),r=new Float32Array(s.flatMap((e=>[e.getX(),e.getY(),e.getZ(),0]))),i=new Uint32Array([s.length]),a=new Float32Array(t.getViewMatrix().toArray()),o=new Float32Array(t.getProjectionMatrix().toArray());this.device.queue.writeBuffer(this.numLightsBuffer,0,i,0,i.length),this.device.queue.writeBuffer(this.lightsBuffer,0,r,0,r.length),this.device.queue.writeBuffer(this.viewBuffer,0,a,0,a.length),this.device.queue.writeBuffer(this.projectionBuffer,0,o,0,o.length),n.beginRenderPass({colorAttachments:[{clearValue:b,loadOp:"clear",storeOp:"store",view:this.ctx.getCurrentTexture().createView()}],depthStencilAttachment:{view:this.depthTexture.createView(),depthClearValue:1,depthLoadOp:"clear",depthStoreOp:"store"}}).end(),e.getMeshes().forEach((e=>{let t=this.bindings.get(e);if(null==t){const s=e.getTextureImages(),r=s[0].width,i=s[0].height,a=s.length,o=this.device.createTexture({size:[r,i,Math.max(a,2)],format:"rgba8unorm",usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT}),h=this.device.createBuffer({size:r*i*a*4,usage:GPUBufferUsage.COPY_SRC,mappedAtCreation:!0}),u=new Uint8Array(h.getMappedRange());s.forEach(((e,t)=>{u.set(e.data,r*i*t*4)})),h.unmap(),n.copyBufferToTexture({buffer:h,bytesPerRow:4*r,rowsPerImage:i},{texture:o},{width:r,height:i,depthOrArrayLayers:a});const c=this.device.createBindGroup({layout:this.renderPipeline.getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:this.numLightsBuffer}},{binding:1,resource:{buffer:this.lightsBuffer}},{binding:2,resource:{buffer:this.viewBuffer}},{binding:3,resource:{buffer:this.projectionBuffer}},{binding:4,resource:this.sampler},{binding:5,resource:o.createView()}]}),d=new Float32Array(e.getOffsets()),f=this.device.createBuffer({size:d.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST});this.device.queue.writeBuffer(f,0,d,0,d.length);const l=new Float32Array(e.getNormals()),g=this.device.createBuffer({size:l.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST});this.device.queue.writeBuffer(g,0,l,0,l.length);const m=new Float32Array(e.getInstancePositions()),p=this.device.createBuffer({size:m.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST});this.device.queue.writeBuffer(p,0,m,0,m.length);const v=new Uint32Array(e.getInstanceRotations()),x=this.device.createBuffer({size:v.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST});this.device.queue.writeBuffer(x,0,v,0,v.length);const w=new Float32Array(e.getUVCoords()),y=this.device.createBuffer({size:w.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST});this.device.queue.writeBuffer(y,0,w,0,w.length);const T=new Uint32Array(e.getInstanceTextureIds()),M=this.device.createBuffer({size:T.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST});this.device.queue.writeBuffer(M,0,T,0,T.length),t={bindGroup:c,offsets:f,normals:g,positions:p,rotations:x,uvs:y,textureIds:M},this.bindings.set(e,t)}const s=n.beginRenderPass({colorAttachments:[{loadOp:"load",storeOp:"store",view:this.ctx.getCurrentTexture().createView()}],depthStencilAttachment:{view:this.depthTexture.createView(),depthLoadOp:"load",depthStoreOp:"store"}});s.setPipeline(this.renderPipeline),s.setBindGroup(0,t.bindGroup),s.setVertexBuffer(0,t.offsets),s.setVertexBuffer(1,t.normals),s.setVertexBuffer(2,t.positions),s.setVertexBuffer(3,t.rotations),s.setVertexBuffer(4,t.uvs),s.setVertexBuffer(5,t.textureIds),s.draw(e.getVertexCount(),e.getInstanceCount()),s.end()})),this.device.queue.submit([n.finish()])}}class U{constructor(e,t){this.meshes=null!=e?e:[],this.lights=null!=t?t:[]}getLights(){return this.lights}getMeshes(){return this.meshes}addMesh(e){this.meshes.indexOf(e)<0&&this.meshes.push(e)}removeMesh(e){const t=this.meshes.indexOf(e);t>=0&&this.meshes.splice(t,1)}addLight(e){this.lights.indexOf(e)<0&&this.lights.push(e)}removeLight(e){const t=this.lights.indexOf(e);t>=0&&this.lights.splice(t,1)}}var I=function(e,t,n,s){return new(n||(n=Promise))((function(r,i){function a(e){try{h(s.next(e))}catch(e){i(e)}}function o(e){try{h(s.throw(e))}catch(e){i(e)}}function h(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,o)}h((s=s.apply(e,t||[])).next())}))};window.onload=()=>I(void 0,void 0,void 0,(function*(){const e=document.body.appendChild(document.createElement("canvas"));e.width=1e3,e.height=500;const n=e.getContext("webgpu");if(null==n)return;const r=yield navigator.gpu.requestAdapter();if(null==r)return;const i=yield r.requestDevice(),a=document.body.appendChild(document.createElement("pre")),o=new t(new s(0,0,10),new s(0,0,0),70/180*Math.PI,e.width/e.height,.5,100),h=new U;function u(){return Math.floor(10*Math.random())}h.addLight(new f(1,2,3)),h.addLight(new f(-1,-2,-3));const p=new y;p.setTextureImages([yield l("./texture/dice.png")]),h.addMesh(p);for(let e=0;e<100;e++)p.addInstance(new s(u(),u(),u()),0,Math.floor(6*Math.random()));const w=new y;w.setTextureImages([yield l("./texture/dice2.png")]),h.addMesh(w);for(let e=0;e<100;e++)w.addInstance(new s(u()+10,u()+10,u()+10),0);const b=new M;b.setTextureImages([yield l("./texture/white.png"),yield l("./texture/yellow.png")]),h.addMesh(b);for(let e=0;e<100;e++)b.addInstance(new s(u()-10,u()-10,u()-10),Math.floor(2*Math.random()),Math.floor(6*Math.random()));const B=yield function(e){return v(this,void 0,void 0,(function*(){const t=m(yield g(e)),n=[],s=[],r=[],i=[],a=[];let o=[],h=null;for(let u=0;u<t.length;u++){const c=t[u].split(" ");if("usemtl"==c[0])null!=h&&i.push({f:o,mtlName:h}),o=[],h=c[1];else if("v"==c[0])n.push([Number(c[1]),Number(c[2]),Number(c[3])]);else if("vn"==c[0])s.push([Number(c[1]),Number(c[2]),Number(c[3])]);else if("vt"==c[0])r.push([Number(c[1]),Number(c[2]),Number(c[3])]);else if("f"==c[0]){const e=[];o.push(e);for(let t=1;t<c.length;t++){const n=c[t].split("/");e.push([Number(n[0]),Number(n[1]),Number(n[2])])}}else"mtllib"==c[0]&&a.push(...yield x(e.replace(/\/[^/]*$/,"/"+c[1])))}return i.push({f:o,mtlName:h}),{v:n,vn:s,vt:r,objects:i,materials:a}}))}("./obj/example.obj");for(let e=0;e<B.objects.length;e++){const t=new T(B.v,B.vn,B.vt,B.objects[e].f),n=B.materials.find((t=>t.name==B.objects[e].mtlName));null!=n&&null!=n.mapKd&&t.setTextureImages([yield l(n.mapKd)]),h.addMesh(t)}const V=new P(n,i),E=new c(window);new d(window,o),function(e){window.addEventListener("wheel",(t=>{e.fov=Math.max(30/180*Math.PI,Math.min(110/180*Math.PI,e.fov+.001*t.deltaY))}),!1)}(o);let C=null,O=0,R=0,S=0,L=0;function N(e,t){return 0==t||e*t<0?0:e<=-1||e>=1?e:e+.05*t}const F=e=>I(void 0,void 0,void 0,(function*(){const t=e-(O||e);O=e,R=N(R,E.getLR()),S=N(S,E.getUD()),L=N(L,E.getFB()),o.move(new s(R*t/50,S*t/50,L*t/50)),V.render(h,o),a.textContent=`FPS: ${1/t*1e3}\ncameraPosX: ${o.position.x}\ncameraPosY: ${o.position.y}\ncameraPosZ: ${o.position.z}\ncameraRotX: ${o.rotation.x}\ncameraRotY: ${o.rotation.y}\ncameraRotZ: ${o.rotation.z}\ncameraFov: ${o.fov}`,C=requestAnimationFrame(F)}));document.addEventListener("pointerlockchange",(()=>{null==document.pointerLockElement?null!=C&&cancelAnimationFrame(C):(O=performance.now(),C=requestAnimationFrame(F))}),!1),document.addEventListener("click",(()=>{document.body.requestPointerLock()}),!1)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,